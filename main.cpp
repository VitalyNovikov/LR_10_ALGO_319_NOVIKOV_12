#include <iostream>
#include <cmath> // Для функції abs() у задачі Begin17
using namespace std;

// ===== Завдання 1 (Param85) =====

// Структура для представлення часу (з Param71)
struct TTime {
    int Hour;   // Години (0-23 або 1-12 в залежності від формату)
    int Min;    // Хвилини (0-59)
    int Sec;    // Секунди (0-59)
};

// Функція для перевірки коректності часу в 24-годинному форматі (з Param71)
int CheckTime(TTime T) {
    int errors = 0; // Лічильник помилок (0 - немає помилок)
    
    // Перевірка годин: мають бути від 0 до 23
    if (T.Hour < 0 || T.Hour > 23) {
        errors += 100; // Додаємо 100 до коду помилки (помилка в годинах)
    }
    
    // Перевірка хвилин: мають бути від 0 до 59
    if (T.Min < 0 || T.Min > 59) {
        errors += 10; // Додаємо 10 до коду помилки (помилка в хвилинах)
    }
    
    // Перевірка секунд: мають бути від 0 до 59
    if (T.Sec < 0 || T.Sec > 59) {
        errors += 1; // Додаємо 1 до коду помилки (помилка в секундах)
    }
    
    return errors; // Повертаємо код помилки (0 означає коректний час)
}

// Функція для перевірки, чи час вже у 24-годинному форматі
bool Is24HourFormat(TTime T) {
    // Час у 24-годинному форматі, якщо години від 0 до 23
    // і хвилини/секунди коректні
    return (T.Hour >= 0 && T.Hour <= 23) && 
           (T.Min >= 0 && T.Min <= 59) && 
           (T.Sec >= 0 && T.Sec <= 59);
}

// Функція для перевірки коректності часу в 12-годинному форматі
bool Is12HourFormatValid(TTime T) {
    // У 12-годинному форматі години мають бути від 1 до 12
    // і хвилини/секунди коректні
    return (T.Hour >= 1 && T.Hour <= 12) && 
           (T.Min >= 0 && T.Min <= 59) && 
           (T.Sec >= 0 && T.Sec <= 59);
}

// Функція для перетворення 12-годинного формату в 24-годинний (Param85)
TTime To24h(TTime T, bool PM) {
    TTime result = {0, 0, 0}; // Ініціалізуємо результат нулями (00:00:00)
    
    // Перевіряємо, чи час вже у 24-годинному форматі
    if (Is24HourFormat(T)) {
        return T; // Якщо так, повертаємо без змін
    }
    
    // Перевіряємо коректність 12-годинного формату
    if (!Is12HourFormatValid(T)) {
        return result; // Повертаємо 00:00:00 у випадку некоректного часу
    }
    
    // Перетворення в 24-годинний формат
    if (PM) {
        // Для PM (після полудня)
        if (T.Hour != 12) {
            result.Hour = T.Hour + 12; // Додаємо 12 до годин (крім 12 PM)
        } else {
            result.Hour = 12; // 12 PM залишається 12 у 24-годинному форматі
        }
    } else {
        // Для AM (до полудня)
        if (T.Hour == 12) {
            result.Hour = 0; // 12 AM стає 00 у 24-годинному форматі
        } else {
            result.Hour = T.Hour; // Інші години залишаються без змін
        }
    }
    
    // Хвилини і секунди залишаються незмінними
    result.Min = T.Min;
    result.Sec = T.Sec;
    
    // Додаткова перевірка на випадок, якщо результат вийшов некоректним
    if (!Is24HourFormat(result)) {
        result = {0, 0, 0}; // Повертаємо 00:00:00 у випадку некоректного результату
    }
    
    return result;
}

// Функція для виведення часу у зручному форматі (HH:MM:SS)
void PrintTime(TTime T) {
    // Виводимо години з ведучим нулем, якщо потрібно
    cout << (T.Hour < 10 ? "0" : "") << T.Hour << ":";
    // Виводимо хвилини з ведучим нулем, якщо потрібно
    cout << (T.Min < 10 ? "0" : "") << T.Min << ":";
    // Виводимо секунди з ведучим нулем, якщо потрібно
    cout << (T.Sec < 10 ? "0" : "") << T.Sec;
}

// Демонстрація роботи функцій для часу
void DemoTimeFunctions() {
    cout << "=== Завдання 1 (Param85) ===" << endl;
    
    // Тестові приклади
    TTime testCases[] = {
        {3, 45, 30},   // 3:45:30 AM - коректний 12-годинний формат
        {12, 0, 0},    // 12:00:00 PM або AM - особливий випадок
        {8, 15, 0},    // 8:15:00 AM - коректний 12-годинний формат
        {6, 30, 45},   // 6:30:45 PM - коректний 12-годинний формат
        {11, 59, 59},  // 11:59:59 PM - коректний 12-годинний формат
        {13, 0, 0},    // Некоректний час (години > 12)
        {5, 60, 0},    // Некоректний час (хвилини > 59)
        {7, 0, 60},    // Некоректний час (секунди > 59)
        {16, 30, 0},   // 16:30:00 - вже у 24-годинному форматі
        {0, 0, 0}      // 00:00:00 - вже у 24-годинному форматі
    };
    
    bool pmFlags[] = {
        false, // 3:45:30 AM
        true,  // 12:00:00 PM
        false, // 8:15:00 AM
        true,  // 6:30:45 PM
        true,  // 11:59:59 PM
        false, // Некоректний час
        false, // Некоректний час
        false, // Некоректний час
        false, // Вже у 24-годинному форматі
        false  // Вже у 24-годинному форматі
    };
    
    for (int i = 0; i < 10; i++) {
        cout << "Тестовий випадок " << i+1 << ":" << endl;
        cout << "Початковий час: ";
        PrintTime(testCases[i]);
        cout << " (" << (pmFlags[i] ? "PM" : "AM") << ")" << endl;
        
        // Перевірка, чи час вже у 24-годинному форматі
        if (Is24HourFormat(testCases[i])) {
            cout << "Час вже у 24-годинному форматі." << endl;
        }
        
        // Перевірка коректності 12-годинного формату
        if (!Is12HourFormatValid(testCases[i])) {
            cout << "Увага: час не відповідає 12-годинному формату!" << endl;
        }
        
        // Перетворення часу
        TTime converted = To24h(testCases[i], pmFlags[i]);
        
        cout << "У 24-годинному форматі: ";
        PrintTime(converted);
        cout << endl << endl;
    }
}



// ===== Завдання 2 (Begin17) =====
// Структура для представлення точки на числовій осі
struct Point {
    double x; // Координата точки
};

// Структура для вхідних та вихідних даних задачі
struct LineSegments {
    Point A, B, C; // Вхідні дані - три точки
    double AC, BC, Sum; // Вихідні дані - довжини відрізків та їх сума
};

// Функція для обчислення довжин відрізків
void CalculateSegments(LineSegments &data) {
    // Обчислюємо довжину відрізка AC (модуль різниці координат)
    data.AC = abs(data.C.x - data.A.x);
    
    // Обчислюємо довжину відрізка BC (модуль різниці координат)
    data.BC = abs(data.C.x - data.B.x);
    
    // Обчислюємо суму довжин
    data.Sum = data.AC + data.BC;
}

// Функція для введення даних та перевірки їх коректності
void InputAndValidate(LineSegments &data) {
    cout << "Введіть координату точки A: ";
    cin >> data.A.x;
    
    cout << "Введіть координату точки B: ";
    cin >> data.B.x;
    
    cout << "Введіть координату точки C: ";
    cin >> data.C.x;
    
    // У цій задачі всі вхідні дані коректні, оскільки вони просто числа
}

// Демонстрація роботи для задачі з точками
void DemoLineSegments() {
    cout << "\n=== Завдання 2 (Begin17) ===" << endl;
    
    LineSegments data;
    
    // Введення даних
    InputAndValidate(data);
    
    // Обчислення
    CalculateSegments(data);
    
    // Виведення результатів
    cout << "Довжина відрізка AC: " << data.AC << endl;
    cout << "Довжина відрізка BC: " << data.BC << endl;
    cout << "Сума довжин AC і BC: " << data.Sum << endl;
}



// ===== Завдання 3 (Boolean13) =====
// Структура для вхідних та вихідних даних задачі
struct NumbersCheck {
    int A, B, C; // Вхідні дані - три цілих числа
    bool result;  // Вихідні дані - результат перевірки
};

// Функція для перевірки умови
void CheckCondition(NumbersCheck &data) {
    // Умова: хоча б одне з чисел A, B, C позитивне
    data.result = (data.A > 0) || (data.B > 0) || (data.C > 0);
}

// Функція для введення даних
void InputNumbers(NumbersCheck &data) {
    cout << "Введіть число A: ";
    cin >> data.A;
    
    cout << "Введіть число B: ";
    cin >> data.B;
    
    cout << "Введіть число C: ";
    cin >> data.C;
}

// Демонстрація роботи для задачі з числами
void DemoNumbersCheck() {
    cout << "\n=== Завдання 3 (Boolean13) ===" << endl;
    
    NumbersCheck data;
    
    // Введення даних
    InputNumbers(data);
    
    // Перевірка умови
    CheckCondition(data);
    
    // Виведення результату
    cout << "Хоча б одне з чисел A, B, C позитивне: " 
         << (data.result ? "так" : "ні") << endl;
}

// ===== Головна функція =====
int main() {
    // Демонстрація роботи всіх трьох завдань
    DemoTimeFunctions();
    DemoLineSegments();
    DemoNumbersCheck();
    
    return 0;
}